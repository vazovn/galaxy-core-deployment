  <chapter id="Overview">
    <title>Overview</title>
    <para>
Gold is an open source accounting system that tracks and manages resource usage on High Performance Computers. It acts much like a bank in which resource credits are deposited into accounts with access controls designating which users, projects and machines may access the account. As jobs complete or as resources are utilized, accounts are charged and resource usage recorded. Gold supports familiar operations such as deposits, withdrawals, transfers and refunds. It provides balance and usage feedback to users, managers, and system administrators.
    </para>
    <para>
Since accounting needs vary widely from organization to organization, Gold has been designed to be extremely flexible, featuring customizable accounting and supporting a variety of accounting models. Attention has been given to scalability, security, and fault tolerance. Gold facilitates the sharing of resources between organizations or within a Grid by providing distributed accounting while preserving local site autonomy.
    </para>

    <sect1 id="Background">
      <title>Background</title>

      <para>
Gold is being developed at Pacific Northwest National Laboratory (PNNL) as open source software under the Scalable Systems Software (SSS) SciDAC project. Gold is currently in alpha release and is beginning alpha testing at a number of DOE and university sites.
      </para>
      <para>
Gold was designed to meet the accounting needs of computing centers that share resources in multi-project environments. In order for an organization to use its high performance computers most effectively, it must be able to allocate resources to the users and projects that need them in a manner that is fair and according to mission objectives. Tracking the historical resource usage allows for insightful capacity planning and in making decisions on how to best mete out these resources. It allows the funding sources that have invested heavily in a supercomputing resource a means to show that it is being utilized efficiently.
      </para>
      <para>
Gold was also designed to facilitate the sharing of resources between organizations or within a Grid to take advantage of the tremendous utilization gains afforded by meta-scheduling.
      </para>
    </sect1>

    <sect1 id="Features">
      <title>Features</title>
        <para>
        <itemizedlist>
          <listitem>
            <para>
<guilabel>Dynamic Charging</guilabel> &mdash;
Rather than post-processing resource usage records on a periodic basis to rectify project balances, acounts are updated immediately at job completion.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Reservations</guilabel> &mdash;
A hold is placed against the account for the estimated number of resource credits before the job runs, followed by an appropriate charge at the moment the job completes, thereby preventing projects from using more resources than were allocated to them.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Flexible Accounts</guilabel> &mdash;
A uniquely flexible account design allows resource credits to be allocated to specific projects, users and machines.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Expiring Allocations</guilabel> &mdash;
Resource credits may be restricted for use within a designated time period allowing sites to implement a use-it-or-lose-it policy to prevent year-end resource exhaustion and establishing a project cycle.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Flexible Charging</guilabel> &mdash;
The system can track and charge for composite resource usage (memory, disk, CPU, etc) and custom charge multipliers can be applied (Quality of Service, Node Type, Time of Day, etc).
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Guaranteed Quotes</guilabel> &mdash; 
Users and resource brokers can determine ahead of time the cost of using resources. 
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Credit and Debit Accounts</guilabel> &mdash; 
Accounts feature an optional credit limit allowing support for both debit and credit models. This feature can also be used to enable overdraft protection for specific accounts.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Nested Accounts</guilabel> &mdash; 
A hierarchical relationship may be created between accounts. This allows for the delegation of management responsibilities, the establishment of automatic rules for the distribution of downstream resource credits, and the option of making higher level credits available to lower level accounts.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Powerful Querying</guilabel> &mdash; 
Gold supports a powerful querying and update mechanism that facilitates flexible reporting and streamlines administrative tasks.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Transparency</guilabel> &mdash; 
Gold allows the establishment of default projects, machines and users. Additionally Gold can allow user, machines and projects to be automatically created the first time they are seen by the resource management system. These features allow job submitters to use the system without even knowing it.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Security</guilabel> &mdash; 
Gold supports multiple security mechanisms for strong authentication and encryption. 
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Role Based Authorization</guilabel> &mdash; 
Gold provides fine-grained (instance-level) Role Based Access Control for all operations. 
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Dynamic Customization</guilabel> &mdash; 
Sites can create or modify record types on the fly enabling them to meet their custom accounting needs. Dynamic object creation allows sites to customize the types of accounting data they collect without modifying the code. This capability turns this system into a generalized information service. This capability is extremely powerful and can be used to manage all varieties of custom configuration data, to provide meta-scheduling resource mapping, or to function as a persistence interface for other components.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Multi-Site Exchange</guilabel> &mdash; 
A traceback mechanism will allows all parties of a transaction (resource requestor and provider) to have a first-hand record of the resource utilization and to have a say as to whether or not the job should be permitted to run, based on their independent policies and priorities. A job will only run if all parties are agreeable to the idea that the target resources can be used in the manner and amount requested. Support for traceback debits will facilitate the establishment of trust and exchange relationships between administrative domains.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Web Interface</guilabel> &mdash; 
Gold will implement a powerful dynamic web-based GUI for easy remote access for users, managers and administrators.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Journaling</guilabel> &mdash; 
Gold implements a journaling mechanism that preserves the indefinite historical state of all objects and records. This powerful mechanism allows historical bank statements to be generated, provides an undo/redo capability and allows commands to be run as if it were any arbitrary time in the past.
            </para>
          </listitem>
          <listitem>
            <para>
<guilabel>Open Source</guilabel> &mdash; 
Being open source allows for site self-sufficiency, customizability and promotes community development and interoperability.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect1>

    <sect1 id="Interfaces">
      <title>Interfaces</title>
      <para>
Gold provides a variety of means of interaction, including command-line interfaces, graphical user interfaces, application programming interfaces and communication protocols.
      </para>

      <sect2 id="CommandLineClients">
        <title>Command Line Clients</title>
        <para>
The command-line clients provided feature rich argument sets and built-in documentation. These commands allow scripting and are the preferred way to interact with Gold for basic usage and administration. Use the --help option for usage information or the --man option for a manual page on any command.
        </para>
        <example>
          <title>Listing Users</title>
          <para>
            <userinput>
glsuser
            </userinput>
          </para>
        </example>
      </sect2>

      <sect2 id="InteractiveControlProgram">
        <title>Interactive Control Program</title>
        <para>
The goldsh command uses a control language to issue object-oriented requests to the server and display the results. The commands may be included directly as command-line arguments or read from stdin. Use the "ShowUsage:=True" option after a valid Object Action combination for usage information on the command.
        </para>
        <example>
          <title>Listing Users</title>
          <para>
            <userinput>
goldsh User Query
            </userinput>
          </para>
        </example>
        <caution>
          <para>
The goldsh control program allows you to make powerful and sweeping modifications to gold objects. Do not use this command unless you understand the syntax and the potential for unintended results.
          </para>
        </caution>
      </sect2>

      <sect2 id="WebGUI">
        <title>Web-based Graphical User Interface</title>
        <para>
A powerful and easy-to-use web-based GUI is being developed for use by users, managers and administrators. It sports two interface types:
          <itemizedlist>
            <listitem>
              <para>
<guilabel>Management Interface</guilabel> &mdash;
The management interface supports an interface that makes administration and interaction very safe and easy. It approaches things from a functional standpoint, aggregating results and protecting against accidental modifications.
              </para>
            </listitem>
            <listitem>
              <para>
<guilabel>Object Interface</guilabel> &mdash;
The object interface exposes you to the full power of the actions the server can perform on the objects. This interface allows actions to be performed on many objects in a single command and can impose arbitrary field conditions, field updates and field selections to the query.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <example>
          <title>Listing Users</title>
          <para>
Click on "Manage Users" -> "List Users"
          </para>
        </example>
      </sect2>

      <sect2 id="PerlAPI">
        <title>Perl API</title>
        <para>
You can access the full Gold functionality via the Perl API. Use perldoc to obtain usage information for the Perl Gold modules.
        </para>
        <example>
          <title>Listing Users</title>
          <programlisting>
use Gold;

my $request = new Gold::Request(object => "User", action => "Query");
my $response = $request->getResponse();
foreach my $datum ($response->getData())
{
  print $datum->toString(), "\n";
}
          </programlisting>
        </example>
      </sect2>

      <sect2 id="SSSRMAP">
        <title>SSSRMAP Wire Protocol</title>
        <para>
It is also possible to interact with Gold by directly using the SSSRMAP Wire Protocol and Message Format over the network. Documentation for these protocols can be found at <ulink url="http://www.clusterresources.com/products/gold/docs/"><citetitle>SSS Resource Management and Accounting Protocol Documentation</citetitle></ulink>.
        </para>
        <example>
          <title>Listing Users</title>
          <literallayout>
POST /SSSRMAP HTTP/1.1
Content-Type: text/xml; charset="utf-8"
Transfer-Encoding: chunked

190
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Envelope&gt;
  &lt;Body actor="scottmo" chunking="True"&gt;
    &lt;Request action="Query" object="User"&gt;&lt;/Request&gt;
  &lt;/Body&gt;
  &lt;Signature&gt;
    &lt;DigestValue&gt;azu4obZswzBt89OgATukBeLyt6Y=&lt;/DigestValue&gt;
    &lt;SignatureValue&gt;YXE/C08XX3RX4PMU1bWju+5/E5M=&lt;/SignatureValue&gt;
    &lt;SecurityToken type="Symmetric" name="scottmo"&gt;&lt;/SecurityToken&gt;
  &lt;/Signature&gt;
&lt;/Envelope&gt;
0
          </literallayout>
        </example>
      </sect2>

    </sect1>

  </chapter>
